// Code generated by go-swagger; DO NOT EDIT.

package qcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new qcp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for qcp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetQcpApply 联盟链申请查询s

联盟链申请查询
*/
func (a *Client) GetQcpApply(params *GetQcpApplyParams) (*GetQcpApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQcpApplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQcpApply",
		Method:             "GET",
		PathPattern:        "/qcp/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetQcpApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQcpApplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetQcpApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostQcpApply 联盟链证书申请s

联盟链证书申请
*/
func (a *Client) PostQcpApply(params *PostQcpApplyParams) (*PostQcpApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQcpApplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostQcpApply",
		Method:             "POST",
		PathPattern:        "/qcp/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostQcpApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQcpApplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostQcpApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutQcpApply 申请审核s

申请审核
*/
func (a *Client) PutQcpApply(params *PutQcpApplyParams) (*PutQcpApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutQcpApplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutQcpApply",
		Method:             "PUT",
		PathPattern:        "/qcp/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutQcpApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutQcpApplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutQcpApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
