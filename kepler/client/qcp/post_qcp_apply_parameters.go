// Code generated by go-swagger; DO NOT EDIT.

package qcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostQcpApplyParams creates a new PostQcpApplyParams object
// with the default values initialized.
func NewPostQcpApplyParams() *PostQcpApplyParams {
	var ()
	return &PostQcpApplyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostQcpApplyParamsWithTimeout creates a new PostQcpApplyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostQcpApplyParamsWithTimeout(timeout time.Duration) *PostQcpApplyParams {
	var ()
	return &PostQcpApplyParams{

		timeout: timeout,
	}
}

// NewPostQcpApplyParamsWithContext creates a new PostQcpApplyParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostQcpApplyParamsWithContext(ctx context.Context) *PostQcpApplyParams {
	var ()
	return &PostQcpApplyParams{

		Context: ctx,
	}
}

// NewPostQcpApplyParamsWithHTTPClient creates a new PostQcpApplyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostQcpApplyParamsWithHTTPClient(client *http.Client) *PostQcpApplyParams {
	var ()
	return &PostQcpApplyParams{
		HTTPClient: client,
	}
}

/*PostQcpApplyParams contains all the parameters to send to the API endpoint
for the post qcp apply operation typically these are written to a http.Request
*/
type PostQcpApplyParams struct {

	/*Email
	  邮箱

	*/
	Email string
	/*Info
	  申请说明

	*/
	Info string
	/*Phone
	  手机号

	*/
	Phone string
	/*QcpChainID
	  联盟链ChainId

	*/
	QcpChainID string
	/*QcpPub
	  QCP公钥

	*/
	QcpPub string
	/*QosChainID
	  公链ChainId

	*/
	QosChainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post qcp apply params
func (o *PostQcpApplyParams) WithTimeout(timeout time.Duration) *PostQcpApplyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post qcp apply params
func (o *PostQcpApplyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post qcp apply params
func (o *PostQcpApplyParams) WithContext(ctx context.Context) *PostQcpApplyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post qcp apply params
func (o *PostQcpApplyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post qcp apply params
func (o *PostQcpApplyParams) WithHTTPClient(client *http.Client) *PostQcpApplyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post qcp apply params
func (o *PostQcpApplyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmail adds the email to the post qcp apply params
func (o *PostQcpApplyParams) WithEmail(email string) *PostQcpApplyParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the post qcp apply params
func (o *PostQcpApplyParams) SetEmail(email string) {
	o.Email = email
}

// WithInfo adds the info to the post qcp apply params
func (o *PostQcpApplyParams) WithInfo(info string) *PostQcpApplyParams {
	o.SetInfo(info)
	return o
}

// SetInfo adds the info to the post qcp apply params
func (o *PostQcpApplyParams) SetInfo(info string) {
	o.Info = info
}

// WithPhone adds the phone to the post qcp apply params
func (o *PostQcpApplyParams) WithPhone(phone string) *PostQcpApplyParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the post qcp apply params
func (o *PostQcpApplyParams) SetPhone(phone string) {
	o.Phone = phone
}

// WithQcpChainID adds the qcpChainID to the post qcp apply params
func (o *PostQcpApplyParams) WithQcpChainID(qcpChainID string) *PostQcpApplyParams {
	o.SetQcpChainID(qcpChainID)
	return o
}

// SetQcpChainID adds the qcpChainId to the post qcp apply params
func (o *PostQcpApplyParams) SetQcpChainID(qcpChainID string) {
	o.QcpChainID = qcpChainID
}

// WithQcpPub adds the qcpPub to the post qcp apply params
func (o *PostQcpApplyParams) WithQcpPub(qcpPub string) *PostQcpApplyParams {
	o.SetQcpPub(qcpPub)
	return o
}

// SetQcpPub adds the qcpPub to the post qcp apply params
func (o *PostQcpApplyParams) SetQcpPub(qcpPub string) {
	o.QcpPub = qcpPub
}

// WithQosChainID adds the qosChainID to the post qcp apply params
func (o *PostQcpApplyParams) WithQosChainID(qosChainID string) *PostQcpApplyParams {
	o.SetQosChainID(qosChainID)
	return o
}

// SetQosChainID adds the qosChainId to the post qcp apply params
func (o *PostQcpApplyParams) SetQosChainID(qosChainID string) {
	o.QosChainID = qosChainID
}

// WriteToRequest writes these params to a swagger request
func (o *PostQcpApplyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param email
	qrEmail := o.Email
	qEmail := qrEmail
	if qEmail != "" {
		if err := r.SetQueryParam("email", qEmail); err != nil {
			return err
		}
	}

	// query param info
	qrInfo := o.Info
	qInfo := qrInfo
	if qInfo != "" {
		if err := r.SetQueryParam("info", qInfo); err != nil {
			return err
		}
	}

	// query param phone
	qrPhone := o.Phone
	qPhone := qrPhone
	if qPhone != "" {
		if err := r.SetQueryParam("phone", qPhone); err != nil {
			return err
		}
	}

	// query param qcpChainId
	qrQcpChainID := o.QcpChainID
	qQcpChainID := qrQcpChainID
	if qQcpChainID != "" {
		if err := r.SetQueryParam("qcpChainId", qQcpChainID); err != nil {
			return err
		}
	}

	// query param qcpPub
	qrQcpPub := o.QcpPub
	qQcpPub := qrQcpPub
	if qQcpPub != "" {
		if err := r.SetQueryParam("qcpPub", qQcpPub); err != nil {
			return err
		}
	}

	// query param qosChainId
	qrQosChainID := o.QosChainID
	qQosChainID := qrQosChainID
	if qQosChainID != "" {
		if err := r.SetQueryParam("qosChainId", qQosChainID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
